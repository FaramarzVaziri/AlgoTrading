# -*- coding: utf-8 -*-
"""MA_crossOver_daily_monitor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TOya6UJhqFAWXfbOHE0Y6o5VJQ1qqmip
"""

pip install yfinance

import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import warnings
from datetime import datetime, timedelta

warnings.filterwarnings("ignore")

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def analyze_strategies(initial_cash, start_date_test, end_date_test, long_window, short_window, symbol):
    # Load test data
    data_test = yf.download(symbol, start=start_date_test, end=end_date_test)

    # Moving Average Crossover Strategy
    def moving_average_crossover(data, short_window, long_window):
        data['Short_MA'] = data['Close'].rolling(window=short_window, min_periods=1).mean()
        data['Long_MA'] = data['Close'].rolling(window=long_window, min_periods=1).mean()
        data['Signal_MA'] = 0.0
        data['Signal_MA'][short_window:] = np.where(data['Short_MA'][short_window:] > data['Long_MA'][short_window:], 1.0, 0.0)
        data['Position_MA'] = data['Signal_MA'].diff()
        return data


    # Apply strategies
    data_test = moving_average_crossover(data_test, short_window=short_window, long_window=long_window)

    # Calculate returns and portfolio value for Moving Average Crossover
    cash_ma = initial_cash
    position_ma = 0
    data_test['Portfolio_MA'] = np.nan

    for i in range(len(data_test)):
        if data_test['Position_MA'].iloc[i] == 1.0:  # Buy signal
            buy_or_sell = 'buy all $'+str(round(cash_ma)) + 'or keep shares if already bought'
            if cash_ma > 0:  # Ensure we only buy if we have cash
                position_ma = cash_ma / data_test['Close'].iloc[i]
                cash_ma = 0
        elif data_test['Position_MA'].iloc[i] == -1.0:  # Sell signal
            buy_or_sell = 'sell all '+str(position_ma)+' shares or hold on if sold already'
            if position_ma > 0:  # Ensure we only sell if we have a position
                cash_ma = position_ma * data_test['Close'].iloc[i]
                position_ma = 0
        data_test['Portfolio_MA'].iloc[i] = cash_ma + position_ma * data_test['Close'].iloc[i]

    final_value_MA = cash_ma + position_ma * data_test['Close'].iloc[-1]
    return_MA = (final_value_MA - initial_cash) / initial_cash * 100


    # Print the results
    print(f"Action: {buy_or_sell}")
    print(f"Moving Average Crossover Strategy Return: {return_MA:.2f}%")
    print(f"Final Portfolio Value: {final_value_MA:.2f}")

    # Plot the results
    plt.figure(figsize=(10, 4))
    plt.plot(data_test['Close'], label='Close Price')
    plt.plot(data_test['Short_MA'], label=f'Short MA ({short_window} days)')
    plt.plot(data_test['Long_MA'], label=f'Long MA ({long_window} days)')
    plt.plot(data_test[data_test['Position_MA'] == 1.0].index, data_test['Short_MA'][data_test['Position_MA'] == 1.0], '^', markersize=10, color='g', lw=0, label='Buy Signal MA')
    plt.plot(data_test[data_test['Position_MA'] == -1.0].index, data_test['Short_MA'][data_test['Position_MA'] == -1.0], 'v', markersize=10, color='r', lw=0, label='Sell Signal MA')
    plt.legend()

    # Plot portfolio values
    plt.figure(figsize=(10, 4))
    plt.plot(data_test.index, data_test['Portfolio_MA'], label='Portfolio Value MA', color='blue')
    plt.title(f'{symbol} - Portfolio Values Over Time')
    plt.legend()
    plt.show()

    return final_value_MA

today = datetime.today().strftime('%Y-%m-%d')
print("Today's date:", today)
three_months_ago = (datetime.today() - timedelta(days=31)).strftime('%Y-%m-%d')
print("Date three months ago:", three_months_ago)

cash_MSFT = 5000
cash_AAPL = 5000
cash_AMZN = 5000
cash_NVDA = 5000

start_date_test = three_months_ago
end_date_test = today

long_window = 7
short_window = 3

"""#Daily Monitor"""

Portfolio = ['AAPL', 'MSFT', 'AMZN', 'NVDA']
cash = [cash_AAPL, cash_MSFT, cash_AMZN, cash_NVDA]
for i in range(len(Portfolio)):
  final_value = analyze_strategies(cash[i], start_date_test, end_date_test, long_window, short_window, Portfolio[i])

print("Final Portfolio Value:", final_value)

